@*
Copyright (C) 2022 Yusuf Kozan

---

Bu belge Yağ Kandili'nin bir parçasıdır.

Yağ Kandili bir özgür yazılımdır: GNU Affero Genel Kamu Lisansı'nın 3.
ya da (isteğinize göre) sonraki bir sürümünün Free Software Foundation
tarafından yayınlandığı durumunun koşulları altında Yağ Kandili'ni
dağıtabilir veya Yağ Kandili üzerinde değişiklik yapabilirsiniz.

Yağ Kandili kullanışlı olması umuduyla dağıtılmaktadır ancak HİÇBİR
GARANTİ VERMEMEKTEDİR, zımni PAZARLANABİLİRLİK veya BELİRLİ BİR
AMACA UYGUNLUK garantisi bile. Daha çok ayrıntı için GNU Affero
Genel Kamu Lisansı'na bakın.

Yağ Kandili'nin yanında GNU Affero Genel Kamu Lisansı'nın bir kopyasını
almış olmalısınız. Almadıysanız, <https://www.gnu.org/licenses/>
adresine bakın.

Yağ Kandili'nin lisansıyla ilgili daha çok bilgi için /Lisans
dizinine bakın.

---

This file is part of Yağ Kandili.

Yağ Kandili is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

Yağ Kandili is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with Yağ Kandili. If not, see <https://www.gnu.org/licenses/>.

For more information about the license of Yağ Kandili, see
/Lisans directory.
*@
@page "/söyleşi/{söyleşi_kimliği}/{önceki_sayfa}"
@layout AnaTaslak
@using System.Threading.Tasks
@using Esas
@using Kilnevüg
@using Bileşenler
@inject IJSRuntime JSruntime
@inject NavigationManager NavigationManager

@if (oturum_açık)
{
    string yön = string.Empty;
    @if (önceki_sayfa == "yorum")
    {
        yön = $"/paylaşım/{başlatan.KİMLİK_2}";
    }
    else if (önceki_sayfa == "takip_dizelgesi")
    {
        yön = "/takip_edilenler/söyleşi";
    }
    parolasız_üye paylaşımı_yapan = new parolasız_üye(söyleşi[0,1]);
    <div class="p-sayfa">
    
        <div style="text-align: center; margin: 1%;">
        @if (önceki_sayfa == "yorum")
        {
            <YönlendirenBaşlık şuraya_yönlendir="@yön" ilk_başlık="@başlatan.BAŞLIK"
            ikinci_başlık="Geri Dön" ilk_renk="rgb(0,120,0)" ikinci_renk="black"/>
        }
        else if (önceki_sayfa == "takip_dizelgesi")
        {
            <YönlendirenBaşlık şuraya_yönlendir="@yön" ilk_başlık="@başlatan.BAŞLIK"
            ikinci_başlık="Geri Dön" ilk_renk="rgb(0,120,0)" ikinci_renk="#ff6600"/>
        }
        </div>

        <div style="text-align: center; margin: 0.5%;">
            <TakipDüğmesi takip_eden=@kullanıcı takip_edilen=@söyleşi_kimliği />
        </div>

        <div class="söz">
            <p>
                <b style="color: rgb(0,120,0);">@paylaşımı_yapan.KULLANICI_ADI:</b> @başlatan.İÇERİK <br/>
                <span style="font-size: small;">@(başlatan.TARİH)</span>
            </p>
        </div>

    @for (int i = 1; i < söyleşi.GetLength(0); i++)
    {
        söz söz = new söz(söyleşi[i,0]);
        parolasız_üye söyleyen = new parolasız_üye(söyleşi[i,1]);

        <div class="söz">
            <p>
                <b style="color: rgb(0,120,0);">@söyleyen.KULLANICI_ADI:</b> @söz.SÖZ <br/>
                <span style="font-size: small;">@(söz.DönüştürülmüşTarih())</span>
            </p>
        </div>
    }
    <input type="text" placeholder="Bir şey söyle" class="MetinKutusu1"
            style="width: 80%; font-size: large; color: black;" @bind="söylenecek_söz"/>
    <button class="düğme_0_120_0" style="font-size: large; border-width: 2px;" @onclick="Söyle">Söyle</button>
    </div>
}
else
{
    <h1 class="Yükleniyor">Yükleniyor</h1>
}

@code {
    [Parameter]
    public string söyleşi_kimliği {get; set;}
    [Parameter]
    public string önceki_sayfa {get; set;}
    private string[,][] söyleşi;
    private paylaşım başlatan;

    protected override void OnParametersSet()
    {
        söyleşi = Esas.VeriTabanı.Söyleşi.TümBilgileriyleSöyleşi(söyleşi_kimliği);
        başlatan = new paylaşım(söyleşi[0,0]);
        if (söyleşi.GetLength(0) < 1)
        {
            NavigationManager.NavigateTo("/ana");
        }
    }

    private string söylenecek_söz;
    private void Söyle()
    {
        if (!String.IsNullOrWhiteSpace(söylenecek_söz))
        {
            yeni_söz söylenecek = new yeni_söz(söylenecek_söz, kullanıcı,
                                    söyleşi_kimliği, DateTime.Now, false, başlatan.KİMLİK_2);
            Esas.VeriTabanı.Söyleşi.Söyle(söylenecek);
            söylenecek_söz = null;
            OnParametersSet();
        }
    }


    private string kullanıcı, oturum;
    private bool oturum_açık;
    public static ÜyeBil bakan_kullanıcı;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            var a = await JSruntime.InvokeAsync<string>("Çerezİşleri.ÇerezOku", "kullanıcı");
            kullanıcı = a.ToString(); a = null;
            var b = await JSruntime.InvokeAsync<string>("Çerezİşleri.ÇerezOku", "oturum");
            oturum = b.ToString(); b = null;
            devam(kullanıcı, oturum);
            StateHasChanged();
        }
        catch
        {
            NavigationManager.NavigateTo("/");
        }
    }
    private void devam(string kullanıcı_kimliği, string oturum_kimliği)
    {
        oturum_açık = Esas.VeriTabanı.Oturum.BuOturumAçık(oturum_kimliği, kullanıcı_kimliği);
        if (!oturum_açık)
        {
            NavigationManager.NavigateTo("/");
        }
        bakan_kullanıcı = Esas.VeriTabanı.Üyelik.ÜyeBilgileri(kullanıcı_kimliği);
    }
}